#
require './rally-tools.rb'
require './errors.rb'
require 'json'
require 'date'
require 'pry'

# An instance of Deployment facilitates the deploying of a group of presets to an environment
class Deployment

  def initialize(presets)
    @presets = presets
    @deployment_log = {successful: [], error: []}
  end

  def self.deploy_preset(preset)

  end

  def deploy()
    @prests.each do |preset|

      begin
        id = RallyTools::get_rally_id_for_preset_name(@preset.name)
        RallyTools::update_preset_in_rally(id, @preset.code)
      rescue RallyMatchNotFoundError
        RallyTools::create_preset_in_rally(@preset)
      end

    end
  end


  def save_report()

  end


end

## A group of functions for identifying and deploying changes made to a Rally repository
module RallyDeploy
  @@log_file_path = 'rally_deploy_log.json'

  # parse commit information from the output of a git log
  def self.parse_log(git_log)
    logged_commits = git_log.split("COMMIT")
    commits = Array.new
    logged_commits.each do |commit_text|
      unless commit_text.nil?
        # parse the commit hashes
        hash_matches = /HASH:(\S*)/.match(commit_text)
        commit_hash = hash_matches ? hash_matches[1] : nil

        # parse the dates
        date_matches = /DATE:(.*) FILES/.match(commit_text)
        date = date_matches ? DateTime.parse(date_matches[1]) : nil

        # parse the files included
        files_matches = /(supply\ chain.*)/.match(commit_text)
        files = files_matches ? files_matches.captures : nil

        # add to commits
        commits.push({ hash: commit_hash, date: date, files: files}) unless commit_hash.nil? || date.nil?
      end
    end
    # sort by date
    commits.sort_by! {|e| e[:date]}
    return commits
  end

  # look for the deployment log, raising an exception if not present
  def self.load_deployment_log()
    deployment_log = RallyTools::open_file(@@log_file_path)
    return JSON[deployment_log]
  end

  def self.get_deployment_log()
    begin
      deployment_log = load_deployment_log()
    rescue FileNotFoundException
      data = [
          {
            hash: "154ad7c77c563b576131a87d0088a65d224f6a81",
            date: DateTime.new()
          }
        ].to_json
      deployment_log = File.new(@@log_file_path, "w")
      File.write(deployment_log, data)
    end

    return deployment_log
  end

  def self.determine_commits_to_deploy(deployment_log, commits)
    last_deployed_hash = deployment_log.last["hash"]
    last_deployed_index = commits.find_index { |commit|  commit[:hash] == last_deployed_hash }
    commits_to_deploy = commits[last_deployed_index..-1]
  end

  def self.load_presets_for_commits(commits)
    presets = []
    commits.each do |commit|
      unless commit[:files].nil?
        commit[:files].each do |file_path|
          p file_path
          begin
            preset = Preset.new(file_path)
            presets.push()
          rescue Errors::FileNotFoundException
            p "File Not Found Exception Occured"
            # do nothing
          end

        end
      end
    return presets
  end

end


#######################
# Get the path to the repository from environment variable
rally_repo_path = ENV['rally_repo_path']

# Execute a shell command to read the git repository log
# this command outputs a log with each commit, commit hash, commit date, and files changed
# clearly marked with special delimiters. (ex. COMMIT HASH:xxx DATE:xxxx FILES:xxxxx)
git_log = `cd #{rally_repo_path};  git log --name-only --pretty=tformat:'COMMIT HASH:%H DATE:%cd FILES:'/`

# parse the log into an array of commit objects
commits = RallyDeploy::parse_log(git_log)

# get the deployment log.  This is a log file generated by this script which tracks
# a history of what has been deployed.  Using this log we can determine what changes
# in the repo have not yet been deployed.
deployment_log = RallyDeploy::get_deployment_log()

# Determine which commits are new and contain changes that need to be deployed
commits_to_deploy = RallyDeploy::determine_commits_to_deploy(deployment_log, commits)

# load the presets for those commits
presets_to_deploy = RallyDeploy::load_presets_for_commits(commits_to_deploy)

# Create a deployment.  This prepares and manages the deployment process.
deployment = Deployment.new(presets_to_deploy)

# Deploy the files to the specified rally environment
end
